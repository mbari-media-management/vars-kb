plugins {
    id 'application'
    id 'org.openjfx.javafxplugin'
    id 'org.beryx.jlink'
}

dependencies {

  implementation project(':org.mbari.kb.core')
  implementation project(':org.mbari.kb.jpa')
  implementation project(':org.mbari.kb.shared')

  implementation 'com.google.code.gson:gson'
  implementation 'com.google.guava:guava'
  implementation 'com.google.inject:guice'
  implementation 'com.rabbitmq:amqp-client'
  implementation 'com.typesafe:config'
  implementation 'foxtrot:foxtrot-core'
  implementation 'jakarta.activation:jakarta.activation-api'
  implementation 'org.bushe:eventbus'
  implementation 'org.eclipse.persistence:org.eclipse.persistence.jpa'
  implementation 'org.mbari.vars:org.mbari.vars.core'
  implementation 'org.mbari.vars:org.mbari.vars.services'
  implementation 'org.mbari:mbarix4j'
  implementation 'org.slf4j:slf4j-api'
  implementation 'org.swinglabs.swingx:swingx-all'
  implementation 'org.swinglabs:swing-layout'
  runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc'
//   runtimeOnly 'com.oracle.database.jdbc:ojdbc10'
//   runtimeOnly 'com.oracle.database.observability:dms'
  runtimeOnly('ch.qos.logback:logback-classic') {
      exclude group: 'javax.activation'
  }
  runtimeOnly 'net.sourceforge.jtds:jtds'
  runtimeOnly 'org.apache.derby:derby'
  runtimeOnly 'org.apache.derby:derbyclient'
  runtimeOnly 'org.apache.derby:derbynet'
  runtimeOnly 'org.apache.derby:derbyshared'
  runtimeOnly 'org.apache.derby:derbytools'
  runtimeOnly 'org.fusesource.jansi:jansi'
  runtimeOnly 'org.postgresql:postgresql'
}

javafx {
    version = javafxVersion
    modules = [
            'javafx.base',
            'javafx.controls'
    ]
}

def runtimeJvmArgs = [
        '-Xms1g',
        '--add-opens', 'java.base/java.lang.invoke=retrofit2',
        '--add-opens', 'java.base/java.lang.invoke=vars.knowledgebase.merged.module',
        '--add-reads', 'vars.annotation.merged.module=org.slf4j'
]

def confEnvParams = [
    "ANNOTATION_SERVICE_CLIENT_SECRET",
    "ANNOTATION_SERVICE_TIMEOUT",
    "ANNOTATION_SERVICE_URL",
    "APP_ANNOTATION_SERVICE",
    "DATABASE_ENVIRONMENT",
    "DATABASE_LOGLEVEL",
    "ORG_MBARI_VARS_KNOWLEDGEBASE_PRODUCTION_DRIVER",
    "ORG_MBARI_VARS_KNOWLEDGEBASE_PRODUCTION_NAME",
    "ORG_MBARI_VARS_KNOWLEDGEBASE_PRODUCTION_PASSWORD",
    "ORG_MBARI_VARS_KNOWLEDGEBASE_PRODUCTION_URL",
    "ORG_MBARI_VARS_KNOWLEDGEBASE_PRODUCTION_USER"
]
confEnvParams.each { k ->
    def v = System.getenv(k)
    if (v) {
        runtimeJvmArgs.add("-D${k}=${v}")
    }
}

tasks.withType(JavaExec) {
  if (System.getProperty('DEBUG', 'false') == 'true') {
    def debugJvmArgs = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=*:5005']
    debugJvmArgs.addAll(runtimeJvmArgs)
    jvmArgs(debugJvmArgs)
  }
}

/* *****************************************************************************
 Use the jlink plugin to build a dist with a JVM
 */
application {
    // mainClassName = "org.mbari.kb.ui/org.mbari.kb.ui.App"
    mainClassName = "org.mbari.kb.ui.App"
    applicationDefaultJvmArgs = runtimeJvmArgs
}


jlink {
    imageZip = file("$buildDir/image-zip/vars-knowledgebase.zip")
    options = [
            '--bind-services',
            '--strip-debug',
            '--compress', '2',
            '--no-header-files',
            '--no-man-pages',
    ]

    if(System.getenv("CI")) {
        ["win", "linux", "mac"].each { name ->
            targetPlatform(name) {
                jdkHome = System.getenv("JDK_HOME_${name.toUpperCase()}")
                addExtraModulePath(System.getenv("OPENJFX_MODS_${name.toUpperCase()}"))
            }
        }
    }

    // gradlew suggestMergedModuleInfo
//     mergedModule {
//         requires 'com.fasterxml.jackson.core'
//     // requires 'com.fasterxml.jackson.annotation';
//         requires 'com.fasterxml.jackson.databind'
//         requires 'com.google.gson'
//         requires 'java.logging'
//         requires 'java.sql'
//         requires 'java.prefs'
//         requires 'java.rmi'
//         requires 'java.xml'
//         requires 'java.desktop'
//         requires 'java.security.jgss'
//         requires 'jdk.unsupported'
//         requires 'java.management'
//         requires 'java.naming'
//         requires 'java.security.sasl'
//         requires 'java.datatransfer'
//         requires 'java.compiler'
//         requires 'java.transaction.xa'
//         requires 'java.instrument'
//         uses 'javax.persistence.spi.PersistenceProvider'
//         uses 'java.nio.file.spi.FileSystemProvider'
// //        provides 'com.fasterxml.jackson.core.JsonFactory' with 'com.fasterxml.jackson.core.JsonFactory'
//         provides 'org.jdesktop.swingx.plaf.LookAndFeelAddons' with 'org.jdesktop.swingx.plaf.linux.LinuxLookAndFeelAddons',
//                 'org.jdesktop.swingx.plaf.macosx.MacOSXLookAndFeelAddons',
//                 'org.jdesktop.swingx.plaf.metal.MetalLookAndFeelAddons',
//                 'org.jdesktop.swingx.plaf.motif.MotifLookAndFeelAddons',
//                 'org.jdesktop.swingx.plaf.nimbus.NimbusLookAndFeelAddons',
//                 'org.jdesktop.swingx.plaf.windows.WindowsClassicLookAndFeelAddons',
//                 'org.jdesktop.swingx.plaf.windows.WindowsLookAndFeelAddons'
// //        provides 'com.fasterxml.jackson.core.ObjectCodec' with 'com.fasterxml.jackson.databind.ObjectMapper'
//         provides 'javax.persistence.spi.PersistenceProvider' with 'org.eclipse.persistence.jpa.PersistenceProvider'
//         provides 'java.sql.Driver' with 'com.microsoft.sqlserver.jdbc.SQLServerDriver',
//                                 'net.sourceforge.jtds.jdbc.Driver',
//                                 'org.postgresql.Driver';
//                                 'oracle.jdbc.OracleDriver';
//     }

    launcher {
        name = 'VARS Knowledgebase'
        jvmArgs = runtimeJvmArgs
    }

    jpackage {
        // jpackageHome = System.getenv("JPACKAGE_HOME")

        def customInstallerOptions = [
                "--copyright", "Monterey Bay Aquarium Research Institute",
                "--vendor", "org.mbari",
                "--name", "VARS Knowledgebase",
                "--app-version", project.version
        ]

        if  (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
            installerType = "deb"
        }
        else if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            installerType = "msi"
        }
        else {
            installerType = "dmg"
            customInstallerOptions.addAll([
                "--mac-package-name", "VARS Knowledgebase",
                "--mac-package-identifier", project.name
            ])
            //imageOptions = ["--icon", "src/jpackage/macos/VARS Knowledgebase.icns"]
        }
        installerOptions = customInstallerOptions

    }

}

tasks.jpackageImage.doLast {
    if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
        def signer = System.getenv("MAC_CODE_SIGNER")
        if (signer) {
            // exec {
            //     println("MACOSX: Signing application")
            //     workingDir "build/jpackage"

            //     executable "codesign"

            //     args "--entitlements", "${projectDir}/src/jpackage/macos/java.entitlements",
            //       "--options", "runtime", "--deep", "-vvv", "-f", "--sign", signer, 
            //       "VARS Knowledgebase.app"
            // }
        }
    }
}
